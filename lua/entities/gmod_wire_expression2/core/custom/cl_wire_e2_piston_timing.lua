E2Helper.Descriptions["allPiston(e:)"] = "Returns the count of all piston keys"
E2Helper.Descriptions["clrPiston(e:)"] = "Clears the pistons from the E2 chip"
E2Helper.Descriptions["cntPiston(e:)"] = "Returns the count of integer piston keys"
E2Helper.Descriptions["getPiston(e:nn)"] = "Returns the piston bearing timing by an integer key"
E2Helper.Descriptions["getPiston(e:nv)"] = "Returns the piston vector timing by an integer key"
E2Helper.Descriptions["getPiston(e:sn)"] = "Returns the piston bearing timing by a string key"
E2Helper.Descriptions["getPiston(e:sv)"] = "Returns the piston vector timing by a string key"
E2Helper.Descriptions["getPistonAxis(e:n)"] = "Returns the shaft rotation axis by an integer key"
E2Helper.Descriptions["getPistonAxis(e:s)"] = "Returns the shaft rotation axis by a string key"
E2Helper.Descriptions["getPistonBase(e:n)"] = "Returns the engine base entity by an integer key"
E2Helper.Descriptions["getPistonBase(e:s)"] = "Returns the engine base entity by a string key"
E2Helper.Descriptions["getPistonMax(e:n)"] = "Returns the piston number highest point parameter by an integer key"
E2Helper.Descriptions["getPistonMax(e:s)"] = "Returns the piston number highest point parameter by a string key"
E2Helper.Descriptions["getPistonMaxX(e:n)"] = "Returns the piston vector highest point parameter by an integer key"
E2Helper.Descriptions["getPistonMaxX(e:s)"] = "Returns the piston vector highest point parameter by a string key"
E2Helper.Descriptions["getPistonMin(e:n)"] = "Returns the piston number lowest point parameter by an integer key"
E2Helper.Descriptions["getPistonMin(e:s)"] = "Returns the piston number lowest point parameter by a string key"
E2Helper.Descriptions["getPistonMinX(e:n)"] = "Returns the piston vector lowest point parameter by an integer key"
E2Helper.Descriptions["getPistonMinX(e:s)"] = "Returns the piston vector lowest point parameter by a string key"
E2Helper.Descriptions["getPistonTopRoll(e:v)"] = "Returns the crankshaft roll direction vector relative to the engine base"
E2Helper.Descriptions["isPistonRamp(e:n)"] = "Returns a flag if the piston is in triangular mode by an integer key"
E2Helper.Descriptions["isPistonRamp(e:s)"] = "Returns a flag if the piston is in triangular mode by a string key"
E2Helper.Descriptions["isPistonSign(e:n)"] = "Returns a flag if the piston is in sign mode by an integer key"
E2Helper.Descriptions["isPistonSign(e:s)"] = "Returns a flag if the piston is in sign mode by a string key"
E2Helper.Descriptions["isPistonSignX(e:n)"] = "Returns a flag if the piston is in cross-product sign mode by an integer key"
E2Helper.Descriptions["isPistonSignX(e:s)"] = "Returns a flag if the piston is in cross-product sign mode by a string key"
E2Helper.Descriptions["isPistonWave(e:n)"] = "Returns a flag if the piston is in wave mode by an integer key"
E2Helper.Descriptions["isPistonWave(e:s)"] = "Returns a flag if the piston is in wave mode by a string key"
E2Helper.Descriptions["isPistonWaveX(e:n)"] = "Returns a flag if the piston is in cross-product wave mode by an integer key"
E2Helper.Descriptions["isPistonWaveX(e:s)"] = "Returns a flag if the piston is in cross-product wave mode by a string key"
E2Helper.Descriptions["putPistonAxis(e:n)"] = "Stores the base prop local axis vector used with the piston cross-product functions"
E2Helper.Descriptions["putPistonAxis(e:nn)"] = "Stores the base prop local axis vector used with the piston cross-product functions"
E2Helper.Descriptions["putPistonAxis(e:nnn)"] = "Stores the base prop local axis vector used with the piston cross-product functions"
E2Helper.Descriptions["putPistonAxis(e:r)"] = "Stores the base prop local axis vector used with the piston cross-product functions"
E2Helper.Descriptions["putPistonAxis(e:v)"] = "Stores the base prop local axis vector used with the piston cross-product functions"
E2Helper.Descriptions["putPistonAxis(e:xv2)"] = "Stores the base prop local axis vector used with the piston cross-product functions"
E2Helper.Descriptions["putPistonBase(e:e)"] = "Stores the base prop entity used with the piston cross-product functions"
E2Helper.Descriptions["remPiston(e:n)"] = "Removes the piston by an integer key"
E2Helper.Descriptions["remPiston(e:s)"] = "Removes the piston by a string key"
E2Helper.Descriptions["resPistonAxis(e:)"] = "Clears the base prop local axis vector used with the piston cross-product functions"
E2Helper.Descriptions["resPistonBase(e:)"] = "Clears the base prop entity used with the piston cross-product functions"
E2Helper.Descriptions["setPistonRamp(e:nn)"] = "Creates a triangular timed piston by an integer key and highest point angle in degrees"
E2Helper.Descriptions["setPistonRamp(e:sn)"] = "Creates a triangular timed piston by a string key and highest point angle in degrees"
E2Helper.Descriptions["setPistonSign(e:nn)"] = "Creates a sign timed piston by an integer key and highest point angle in degrees"
E2Helper.Descriptions["setPistonSign(e:sn)"] = "Creates a sign timed piston by a string key and highest point angle in degrees"
E2Helper.Descriptions["setPistonSignX(e:nv)"] = "Creates a cross-product timed piston with sign output by an integer key and highest point local vector"
E2Helper.Descriptions["setPistonSignX(e:nvve)"] = "Creates a cross-product timed piston with sign output by an integer key and highest point local vector"
E2Helper.Descriptions["setPistonSignX(e:sv)"] = "Creates a cross-product timed piston with sign output by a string key and highest point local vector"
E2Helper.Descriptions["setPistonSignX(e:svve)"] = "Creates a cross-product timed piston with sign output by a string key and highest point local vector"
E2Helper.Descriptions["setPistonWave(e:nn)"] = "Creates a wave timed piston by an integer key and highest point angle in degrees"
E2Helper.Descriptions["setPistonWave(e:sn)"] = "Creates a wave timed piston by a string key and highest point angle in degrees"
E2Helper.Descriptions["setPistonWaveX(e:nv)"] = "Creates a cross-product timed piston with wave output by an integer key and highest point local vector"
E2Helper.Descriptions["setPistonWaveX(e:nvve)"] = "Creates a cross-product timed piston with wave output by an integer key and highest point local vector"
E2Helper.Descriptions["setPistonWaveX(e:sv)"] = "Creates a cross-product timed piston with wave output by a string key and highest point local vector"
E2Helper.Descriptions["setPistonWaveX(e:svve)"] = "Creates a cross-product timed piston with wave output by a string key and highest point local vector"
